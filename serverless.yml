service: Vanilla
frameworkVersion: ^3
useDotenv: true

plugins:
  - serverless-esbuild
  - serverless-iam-roles-per-function

custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: false
    target: node20

package:
  individually: true
  patterns:
    - '!.env'

provider:
  name: aws
  region: ap-southeast-2
  runtime: nodejs20.x
  memorySize: 512
  timeout: 29
  stage: v1
  logRetentionInDays: 30
  profile: ${env:AWS_PROFILE, 'default'}

  httpApi:
    cors: true

functions:
  HandleMessage:
    handler: src/handlers/handleMessage.handler
    environment:
      LINE_BOT_TOPIC: !Ref LineBotTopic
    events:
      - httpApi:
          method: POST
          path: /chat
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sns:Publish
        Resource: !Ref LineBotTopic

  LineBot:
    handler: src/handlers/lineBot.handler
    timeout: 180
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - !Sub arn:aws:ssm:${self:provider.region}:${AWS::AccountId}:parameter/vanilla/*
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
          - dynamodb:DeleteItem
        Resource:
          - !GetAtt MessageTable.Arn
          - !GetAtt ChatConfigurationTable.Arn
          - !GetAtt CheckpointsTable.Arn
          - !GetAtt CheckpointWritesTable.Arn

resources:
  Resources:
    LineBotTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: lintbot-topic

    LintBotSnsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: LineBotTopic
        Protocol: lambda
        Endpoint: !GetAtt LineBotLambdaFunction.Arn

    LineBotSnsPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt LineBotLambdaFunction.Arn
        Principal: sns.amazonaws.com
        SourceArn: !Ref LineBotTopic

    SelfBotInstance:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: ami-040e71e7b8391cae4
        InstanceType: t2.micro
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt update
            sudo apt install git -y
            git clone https://github.com/Foreverskyin0216/Vanilla.git /home/ubuntu/Vanilla
            cd /home/ubuntu/Vanilla
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
            source ~/.nvm/nvm.sh
            nvm install 22
            npm install
            nohup npm run start > vanilla.log &

    SelfBotSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SelfBotSecurityGroup
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0

    SelfBotProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Roles:
          - Ref: SelfBotRole

    SelfBotRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: VanillaServiceRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: SelfBotPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ssm:GetParameter
                    - ssm:PutParameter
                  Resource:
                    - !Sub arn:aws:ssm:${self:provider.region}:${AWS::AccountId}:parameter/vanilla/*
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:Query
                    - dynamodb:PutItem
                    - dynamodb:BatchWriteItem
                    - dynamodb:DeleteItem
                  Resource:
                    - !GetAtt MessageTable.Arn
                    - !GetAtt ChatConfigurationTable.Arn
                    - !GetAtt CheckpointsTable.Arn
                    - !GetAtt CheckpointWritesTable.Arn

    LineEmailParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /vanilla/line/email
        Type: String
        Value: ${env:LINE_EMAIL}

    LinePasswordParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /vanilla/line/password
        Type: String
        Value: ${env:LINE_PASSWORD}

    LineChannelAccessTokenParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /vanilla/line/channelAccessToken
        Type: String
        Value: ${env:LINE_CHANNEL_ACCESS_TOKEN}

    OpenAIApiKeyParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /vanilla/openai/apiKey
        Type: String
        Value: ${env:OPENAI_API_KEY}

    MessageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Message
        AttributeDefinitions:
          - AttributeName: thread_id
            AttributeType: S
          - AttributeName: created_at
            AttributeType: N
        KeySchema:
          - AttributeName: thread_id
            KeyType: HASH
          - AttributeName: created_at
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    ChatConfigurationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ChatConfiguration
        AttributeDefinitions:
          - AttributeName: thread_id
            AttributeType: S
        KeySchema:
          - AttributeName: thread_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    CheckpointsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Checkpoints
        AttributeDefinitions:
          - AttributeName: thread_id
            AttributeType: S
          - AttributeName: checkpoint_id
            AttributeType: S
        KeySchema:
          - AttributeName: thread_id
            KeyType: HASH
          - AttributeName: checkpoint_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    CheckpointWritesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CheckpointWrites
        AttributeDefinitions:
          - AttributeName: thread_id_checkpoint_id_checkpoint_ns
            AttributeType: S
          - AttributeName: task_index
            AttributeType: S
        KeySchema:
          - AttributeName: thread_id_checkpoint_id_checkpoint_ns
            KeyType: HASH
          - AttributeName: task_index
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
